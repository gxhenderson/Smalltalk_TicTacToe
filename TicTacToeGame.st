SimpleButtonMorph subclass: #Cell	instanceVariableNames: 'board rowNum colNum mark'	classVariableNames: ''	poolDictionaries: ''	category: 'TicTacToeGame'!!Cell methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 11:57'!initialize	super initialize.	self label: ''.	mark := ''.	self extent: 80@80.	self color: (Color r: 0.25 g: 0.972 b: 0.443).	self on: #click send: #value to: (self markCell).	^self.! !!Cell methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 11:50'!mark		^mark! !!Cell methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 11:55'!markCell	"marks the cell with X or O"	^[(self label size) == 0		ifTrue: [ 			mark := (board updateRow: rowNum col: colNum).			self label: mark.			self extent: 80@80.			board checkForWinner.		].	   ]! !!Cell methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 09:23'!setBoard: ticTacToeBoard row: row col: col	"sets the tictactoe board the cell is on"	board := ticTacToeBoard.	rowNum := row.	colNum := col.! !BorderedMorph subclass: #TicTacToe	instanceVariableNames: 'winner model cells turns currentFill n'	classVariableNames: ''	poolDictionaries: ''	category: 'TicTacToeGame'!!TicTacToe methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 11:56'!checkForWinner	(turns > 5)		ifTrue: [			1 to: 3 do: [:n | self checkForWinnerInRow: n. self checkForWinnerInCol: n].				self checkForWinnerInDiagonals.				(turns > 9)				ifTrue: [self resetBoard].		]! !!TicTacToe methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 12:15'!checkForWinnerInCol: n	(((cells at: 1 at: n) == (cells at: 2 at: n)) and: 		((cells at: 2 at: n) == (cells at: 3 at: n)))		ifTrue: [ self printWinner. self resetBoard]! !!TicTacToe methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 12:39'!checkForWinnerInDiagonals	(((cells at: 3 at: 3) == (cells at: 2 at: 2) and: (cells at: 2 at: 2) == (cells at: 1 at: 1)) or:		((cells at: 3 at: 1) == (cells at: 2 at: 2) and: (cells at: 2 at: 2) == (cells at: 1 at: 3)))		ifTrue: [ self printWinner. self resetBoard ].! !!TicTacToe methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 12:16'!checkForWinnerInRow: n	(((cells at: n at: 1) == (cells at: n at: 2)) and: 		((cells at: n at: 2) == (cells at: n at: 3)))		ifTrue: [ self printWinner. self resetBoard]! !!TicTacToe methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 11:58'!initialize	| sampleCell width height n |		super initialize.	winner := false.	turns := 1.	n := 3.	model := self.	sampleCell := Cell new.	width := sampleCell width.	height := sampleCell height.	self bounds: (5@5 extent:((width*n) @(height*n)) + (2 * self borderWidth)).	cells := Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].! !!TicTacToe methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 09:20'!newCellAt: i at: j	"Create a cell for position (i,j) and add it to my on--screen	representation at the appropriate screen position. "	| c origin |	c := Cell new.	c setBoard: self  row: i col: j.	origin := self innerBounds origin.	self addMorph: c.	c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.	^c! !!TicTacToe methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 12:33'!printWinner	(winner == false)		ifTrue: [			winner := true.			((turns-1)\\2 == 1)				ifTrue: [ Transcript show: 'Player 1 wins!!';cr. ]				ifFalse: [ Transcript show: 'Player 2 wins!!';cr. ]		]! !!TicTacToe methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 12:54'!resetBoard	| t |	Smalltalk garbageCollect.	t := TicTacToe new.	t openInWorld.	self delete.! !!TicTacToe methodsFor: 'as yet unclassified' stamp: 'gxh 4/6/2016 11:55'!updateRow: rowNum col: colNum		(turns\\2 == 1)		ifTrue: [currentFill := 'X']		ifFalse: [currentFill := 'O'].	turns := turns + 1.	cells at: rowNum at: colNum put: currentFill.	^currentFill! !